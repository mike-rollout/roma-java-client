/*
 * Contacts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.mike_rollout.api;

import io.github.mike_rollout.ApiCallback;
import io.github.mike_rollout.ApiClient;
import io.github.mike_rollout.ApiException;
import io.github.mike_rollout.ApiResponse;
import io.github.mike_rollout.Configuration;
import io.github.mike_rollout.Pair;
import io.github.mike_rollout.ProgressRequestBody;
import io.github.mike_rollout.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.mike_rollout.model.CollectionResponseSimplePublicObjectWithAssociationsForwardPaging;
import io.github.mike_rollout.model.Error;
import io.github.mike_rollout.model.SimplePublicObject;
import io.github.mike_rollout.model.SimplePublicObjectInput;
import io.github.mike_rollout.model.SimplePublicObjectInputForCreate;
import io.github.mike_rollout.model.SimplePublicObjectWithAssociations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BasicApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BasicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BasicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteCrmV3ObjectsContactsContactIdArchive
     * @param contactId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCrmV3ObjectsContactsContactIdArchiveCall(String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crm/v3/objects/contacts/{contactId}"
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "private_apps" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCrmV3ObjectsContactsContactIdArchiveValidateBeforeCall(String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling deleteCrmV3ObjectsContactsContactIdArchive(Async)");
        }

        return deleteCrmV3ObjectsContactsContactIdArchiveCall(contactId, _callback);

    }

    /**
     * Archive
     * Move an Object identified by &#x60;{contactId}&#x60; to the recycling bin.
     * @param contactId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCrmV3ObjectsContactsContactIdArchive(String contactId) throws ApiException {
        deleteCrmV3ObjectsContactsContactIdArchiveWithHttpInfo(contactId);
    }

    /**
     * Archive
     * Move an Object identified by &#x60;{contactId}&#x60; to the recycling bin.
     * @param contactId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCrmV3ObjectsContactsContactIdArchiveWithHttpInfo(String contactId) throws ApiException {
        okhttp3.Call localVarCall = deleteCrmV3ObjectsContactsContactIdArchiveValidateBeforeCall(contactId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Archive (asynchronously)
     * Move an Object identified by &#x60;{contactId}&#x60; to the recycling bin.
     * @param contactId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCrmV3ObjectsContactsContactIdArchiveAsync(String contactId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCrmV3ObjectsContactsContactIdArchiveValidateBeforeCall(contactId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCrmV3ObjectsContactsContactIdGetById
     * @param contactId  (required)
     * @param properties A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)
     * @param propertiesWithHistory A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)
     * @param associations A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrmV3ObjectsContactsContactIdGetByIdCall(String contactId, List<String> properties, List<String> propertiesWithHistory, List<String> associations, Boolean archived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crm/v3/objects/contacts/{contactId}"
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        if (propertiesWithHistory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertiesWithHistory", propertiesWithHistory));
        }

        if (associations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "associations", associations));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "private_apps" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCrmV3ObjectsContactsContactIdGetByIdValidateBeforeCall(String contactId, List<String> properties, List<String> propertiesWithHistory, List<String> associations, Boolean archived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling getCrmV3ObjectsContactsContactIdGetById(Async)");
        }

        return getCrmV3ObjectsContactsContactIdGetByIdCall(contactId, properties, propertiesWithHistory, associations, archived, _callback);

    }

    /**
     * Read
     * Read an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID.  Control what is returned via the &#x60;properties&#x60; query param.
     * @param contactId  (required)
     * @param properties A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)
     * @param propertiesWithHistory A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)
     * @param associations A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @return SimplePublicObjectWithAssociations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SimplePublicObjectWithAssociations getCrmV3ObjectsContactsContactIdGetById(String contactId, List<String> properties, List<String> propertiesWithHistory, List<String> associations, Boolean archived) throws ApiException {
        ApiResponse<SimplePublicObjectWithAssociations> localVarResp = getCrmV3ObjectsContactsContactIdGetByIdWithHttpInfo(contactId, properties, propertiesWithHistory, associations, archived);
        return localVarResp.getData();
    }

    /**
     * Read
     * Read an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID.  Control what is returned via the &#x60;properties&#x60; query param.
     * @param contactId  (required)
     * @param properties A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)
     * @param propertiesWithHistory A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)
     * @param associations A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @return ApiResponse&lt;SimplePublicObjectWithAssociations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimplePublicObjectWithAssociations> getCrmV3ObjectsContactsContactIdGetByIdWithHttpInfo(String contactId, List<String> properties, List<String> propertiesWithHistory, List<String> associations, Boolean archived) throws ApiException {
        okhttp3.Call localVarCall = getCrmV3ObjectsContactsContactIdGetByIdValidateBeforeCall(contactId, properties, propertiesWithHistory, associations, archived, null);
        Type localVarReturnType = new TypeToken<SimplePublicObjectWithAssociations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read (asynchronously)
     * Read an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID.  Control what is returned via the &#x60;properties&#x60; query param.
     * @param contactId  (required)
     * @param properties A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)
     * @param propertiesWithHistory A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)
     * @param associations A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrmV3ObjectsContactsContactIdGetByIdAsync(String contactId, List<String> properties, List<String> propertiesWithHistory, List<String> associations, Boolean archived, final ApiCallback<SimplePublicObjectWithAssociations> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCrmV3ObjectsContactsContactIdGetByIdValidateBeforeCall(contactId, properties, propertiesWithHistory, associations, archived, _callback);
        Type localVarReturnType = new TypeToken<SimplePublicObjectWithAssociations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCrmV3ObjectsContactsGetPage
     * @param limit The maximum number of results to display per page. (optional, default to 10)
     * @param after The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)
     * @param properties A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)
     * @param propertiesWithHistory A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)
     * @param associations A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrmV3ObjectsContactsGetPageCall(Integer limit, String after, List<String> properties, List<String> propertiesWithHistory, List<String> associations, Boolean archived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crm/v3/objects/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (properties != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "properties", properties));
        }

        if (propertiesWithHistory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertiesWithHistory", propertiesWithHistory));
        }

        if (associations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "associations", associations));
        }

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "private_apps" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCrmV3ObjectsContactsGetPageValidateBeforeCall(Integer limit, String after, List<String> properties, List<String> propertiesWithHistory, List<String> associations, Boolean archived, final ApiCallback _callback) throws ApiException {
        return getCrmV3ObjectsContactsGetPageCall(limit, after, properties, propertiesWithHistory, associations, archived, _callback);

    }

    /**
     * List
     * Read a page of contacts. Control what is returned via the &#x60;properties&#x60; query param.
     * @param limit The maximum number of results to display per page. (optional, default to 10)
     * @param after The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)
     * @param properties A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)
     * @param propertiesWithHistory A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)
     * @param associations A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @return CollectionResponseSimplePublicObjectWithAssociationsForwardPaging
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CollectionResponseSimplePublicObjectWithAssociationsForwardPaging getCrmV3ObjectsContactsGetPage(Integer limit, String after, List<String> properties, List<String> propertiesWithHistory, List<String> associations, Boolean archived) throws ApiException {
        ApiResponse<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging> localVarResp = getCrmV3ObjectsContactsGetPageWithHttpInfo(limit, after, properties, propertiesWithHistory, associations, archived);
        return localVarResp.getData();
    }

    /**
     * List
     * Read a page of contacts. Control what is returned via the &#x60;properties&#x60; query param.
     * @param limit The maximum number of results to display per page. (optional, default to 10)
     * @param after The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)
     * @param properties A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)
     * @param propertiesWithHistory A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)
     * @param associations A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @return ApiResponse&lt;CollectionResponseSimplePublicObjectWithAssociationsForwardPaging&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging> getCrmV3ObjectsContactsGetPageWithHttpInfo(Integer limit, String after, List<String> properties, List<String> propertiesWithHistory, List<String> associations, Boolean archived) throws ApiException {
        okhttp3.Call localVarCall = getCrmV3ObjectsContactsGetPageValidateBeforeCall(limit, after, properties, propertiesWithHistory, associations, archived, null);
        Type localVarReturnType = new TypeToken<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List (asynchronously)
     * Read a page of contacts. Control what is returned via the &#x60;properties&#x60; query param.
     * @param limit The maximum number of results to display per page. (optional, default to 10)
     * @param after The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results. (optional)
     * @param properties A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored. (optional)
     * @param propertiesWithHistory A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request. (optional)
     * @param associations A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored. (optional)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrmV3ObjectsContactsGetPageAsync(Integer limit, String after, List<String> properties, List<String> propertiesWithHistory, List<String> associations, Boolean archived, final ApiCallback<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCrmV3ObjectsContactsGetPageValidateBeforeCall(limit, after, properties, propertiesWithHistory, associations, archived, _callback);
        Type localVarReturnType = new TypeToken<CollectionResponseSimplePublicObjectWithAssociationsForwardPaging>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchCrmV3ObjectsContactsContactIdUpdate
     * @param contactId  (required)
     * @param simplePublicObjectInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCrmV3ObjectsContactsContactIdUpdateCall(String contactId, SimplePublicObjectInput simplePublicObjectInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simplePublicObjectInput;

        // create path and map variables
        String localVarPath = "/crm/v3/objects/contacts/{contactId}"
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "private_apps" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchCrmV3ObjectsContactsContactIdUpdateValidateBeforeCall(String contactId, SimplePublicObjectInput simplePublicObjectInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling patchCrmV3ObjectsContactsContactIdUpdate(Async)");
        }

        // verify the required parameter 'simplePublicObjectInput' is set
        if (simplePublicObjectInput == null) {
            throw new ApiException("Missing the required parameter 'simplePublicObjectInput' when calling patchCrmV3ObjectsContactsContactIdUpdate(Async)");
        }

        return patchCrmV3ObjectsContactsContactIdUpdateCall(contactId, simplePublicObjectInput, _callback);

    }

    /**
     * Update
     * Perform a partial update of an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
     * @param contactId  (required)
     * @param simplePublicObjectInput  (required)
     * @return SimplePublicObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SimplePublicObject patchCrmV3ObjectsContactsContactIdUpdate(String contactId, SimplePublicObjectInput simplePublicObjectInput) throws ApiException {
        ApiResponse<SimplePublicObject> localVarResp = patchCrmV3ObjectsContactsContactIdUpdateWithHttpInfo(contactId, simplePublicObjectInput);
        return localVarResp.getData();
    }

    /**
     * Update
     * Perform a partial update of an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
     * @param contactId  (required)
     * @param simplePublicObjectInput  (required)
     * @return ApiResponse&lt;SimplePublicObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimplePublicObject> patchCrmV3ObjectsContactsContactIdUpdateWithHttpInfo(String contactId, SimplePublicObjectInput simplePublicObjectInput) throws ApiException {
        okhttp3.Call localVarCall = patchCrmV3ObjectsContactsContactIdUpdateValidateBeforeCall(contactId, simplePublicObjectInput, null);
        Type localVarReturnType = new TypeToken<SimplePublicObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (asynchronously)
     * Perform a partial update of an Object identified by &#x60;{contactId}&#x60;. &#x60;{contactId}&#x60; refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
     * @param contactId  (required)
     * @param simplePublicObjectInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCrmV3ObjectsContactsContactIdUpdateAsync(String contactId, SimplePublicObjectInput simplePublicObjectInput, final ApiCallback<SimplePublicObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchCrmV3ObjectsContactsContactIdUpdateValidateBeforeCall(contactId, simplePublicObjectInput, _callback);
        Type localVarReturnType = new TypeToken<SimplePublicObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCrmV3ObjectsContactsCreate
     * @param simplePublicObjectInputForCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCrmV3ObjectsContactsCreateCall(SimplePublicObjectInputForCreate simplePublicObjectInputForCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simplePublicObjectInputForCreate;

        // create path and map variables
        String localVarPath = "/crm/v3/objects/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "private_apps" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCrmV3ObjectsContactsCreateValidateBeforeCall(SimplePublicObjectInputForCreate simplePublicObjectInputForCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simplePublicObjectInputForCreate' is set
        if (simplePublicObjectInputForCreate == null) {
            throw new ApiException("Missing the required parameter 'simplePublicObjectInputForCreate' when calling postCrmV3ObjectsContactsCreate(Async)");
        }

        return postCrmV3ObjectsContactsCreateCall(simplePublicObjectInputForCreate, _callback);

    }

    /**
     * Create
     * Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.
     * @param simplePublicObjectInputForCreate  (required)
     * @return SimplePublicObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SimplePublicObject postCrmV3ObjectsContactsCreate(SimplePublicObjectInputForCreate simplePublicObjectInputForCreate) throws ApiException {
        ApiResponse<SimplePublicObject> localVarResp = postCrmV3ObjectsContactsCreateWithHttpInfo(simplePublicObjectInputForCreate);
        return localVarResp.getData();
    }

    /**
     * Create
     * Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.
     * @param simplePublicObjectInputForCreate  (required)
     * @return ApiResponse&lt;SimplePublicObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimplePublicObject> postCrmV3ObjectsContactsCreateWithHttpInfo(SimplePublicObjectInputForCreate simplePublicObjectInputForCreate) throws ApiException {
        okhttp3.Call localVarCall = postCrmV3ObjectsContactsCreateValidateBeforeCall(simplePublicObjectInputForCreate, null);
        Type localVarReturnType = new TypeToken<SimplePublicObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create (asynchronously)
     * Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.
     * @param simplePublicObjectInputForCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCrmV3ObjectsContactsCreateAsync(SimplePublicObjectInputForCreate simplePublicObjectInputForCreate, final ApiCallback<SimplePublicObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCrmV3ObjectsContactsCreateValidateBeforeCall(simplePublicObjectInputForCreate, _callback);
        Type localVarReturnType = new TypeToken<SimplePublicObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
