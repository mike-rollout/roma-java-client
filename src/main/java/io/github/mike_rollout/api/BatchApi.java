/*
 * Contacts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.mike_rollout.api;

import io.github.mike_rollout.ApiCallback;
import io.github.mike_rollout.ApiClient;
import io.github.mike_rollout.ApiException;
import io.github.mike_rollout.ApiResponse;
import io.github.mike_rollout.Configuration;
import io.github.mike_rollout.Pair;
import io.github.mike_rollout.ProgressRequestBody;
import io.github.mike_rollout.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.mike_rollout.model.BatchInputSimplePublicObjectBatchInput;
import io.github.mike_rollout.model.BatchInputSimplePublicObjectId;
import io.github.mike_rollout.model.BatchInputSimplePublicObjectInputForCreate;
import io.github.mike_rollout.model.BatchReadInputSimplePublicObjectId;
import io.github.mike_rollout.model.BatchResponseSimplePublicObject;
import io.github.mike_rollout.model.BatchResponseSimplePublicObjectWithErrors;
import io.github.mike_rollout.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BatchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BatchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BatchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postCrmV3ObjectsContactsBatchArchiveArchive
     * @param batchInputSimplePublicObjectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCrmV3ObjectsContactsBatchArchiveArchiveCall(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchInputSimplePublicObjectId;

        // create path and map variables
        String localVarPath = "/crm/v3/objects/contacts/batch/archive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "private_apps" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCrmV3ObjectsContactsBatchArchiveArchiveValidateBeforeCall(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchInputSimplePublicObjectId' is set
        if (batchInputSimplePublicObjectId == null) {
            throw new ApiException("Missing the required parameter 'batchInputSimplePublicObjectId' when calling postCrmV3ObjectsContactsBatchArchiveArchive(Async)");
        }

        return postCrmV3ObjectsContactsBatchArchiveArchiveCall(batchInputSimplePublicObjectId, _callback);

    }

    /**
     * Archive a batch of contacts by ID
     * 
     * @param batchInputSimplePublicObjectId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void postCrmV3ObjectsContactsBatchArchiveArchive(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId) throws ApiException {
        postCrmV3ObjectsContactsBatchArchiveArchiveWithHttpInfo(batchInputSimplePublicObjectId);
    }

    /**
     * Archive a batch of contacts by ID
     * 
     * @param batchInputSimplePublicObjectId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postCrmV3ObjectsContactsBatchArchiveArchiveWithHttpInfo(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId) throws ApiException {
        okhttp3.Call localVarCall = postCrmV3ObjectsContactsBatchArchiveArchiveValidateBeforeCall(batchInputSimplePublicObjectId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Archive a batch of contacts by ID (asynchronously)
     * 
     * @param batchInputSimplePublicObjectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCrmV3ObjectsContactsBatchArchiveArchiveAsync(BatchInputSimplePublicObjectId batchInputSimplePublicObjectId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCrmV3ObjectsContactsBatchArchiveArchiveValidateBeforeCall(batchInputSimplePublicObjectId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCrmV3ObjectsContactsBatchCreateCreate
     * @param batchInputSimplePublicObjectInputForCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCrmV3ObjectsContactsBatchCreateCreateCall(BatchInputSimplePublicObjectInputForCreate batchInputSimplePublicObjectInputForCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchInputSimplePublicObjectInputForCreate;

        // create path and map variables
        String localVarPath = "/crm/v3/objects/contacts/batch/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "private_apps" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCrmV3ObjectsContactsBatchCreateCreateValidateBeforeCall(BatchInputSimplePublicObjectInputForCreate batchInputSimplePublicObjectInputForCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchInputSimplePublicObjectInputForCreate' is set
        if (batchInputSimplePublicObjectInputForCreate == null) {
            throw new ApiException("Missing the required parameter 'batchInputSimplePublicObjectInputForCreate' when calling postCrmV3ObjectsContactsBatchCreateCreate(Async)");
        }

        return postCrmV3ObjectsContactsBatchCreateCreateCall(batchInputSimplePublicObjectInputForCreate, _callback);

    }

    /**
     * Create a batch of contacts
     * 
     * @param batchInputSimplePublicObjectInputForCreate  (required)
     * @return BatchResponseSimplePublicObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public BatchResponseSimplePublicObject postCrmV3ObjectsContactsBatchCreateCreate(BatchInputSimplePublicObjectInputForCreate batchInputSimplePublicObjectInputForCreate) throws ApiException {
        ApiResponse<BatchResponseSimplePublicObject> localVarResp = postCrmV3ObjectsContactsBatchCreateCreateWithHttpInfo(batchInputSimplePublicObjectInputForCreate);
        return localVarResp.getData();
    }

    /**
     * Create a batch of contacts
     * 
     * @param batchInputSimplePublicObjectInputForCreate  (required)
     * @return ApiResponse&lt;BatchResponseSimplePublicObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchResponseSimplePublicObject> postCrmV3ObjectsContactsBatchCreateCreateWithHttpInfo(BatchInputSimplePublicObjectInputForCreate batchInputSimplePublicObjectInputForCreate) throws ApiException {
        okhttp3.Call localVarCall = postCrmV3ObjectsContactsBatchCreateCreateValidateBeforeCall(batchInputSimplePublicObjectInputForCreate, null);
        Type localVarReturnType = new TypeToken<BatchResponseSimplePublicObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a batch of contacts (asynchronously)
     * 
     * @param batchInputSimplePublicObjectInputForCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCrmV3ObjectsContactsBatchCreateCreateAsync(BatchInputSimplePublicObjectInputForCreate batchInputSimplePublicObjectInputForCreate, final ApiCallback<BatchResponseSimplePublicObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCrmV3ObjectsContactsBatchCreateCreateValidateBeforeCall(batchInputSimplePublicObjectInputForCreate, _callback);
        Type localVarReturnType = new TypeToken<BatchResponseSimplePublicObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCrmV3ObjectsContactsBatchReadRead
     * @param batchReadInputSimplePublicObjectId  (required)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCrmV3ObjectsContactsBatchReadReadCall(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, Boolean archived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchReadInputSimplePublicObjectId;

        // create path and map variables
        String localVarPath = "/crm/v3/objects/contacts/batch/read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "private_apps" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCrmV3ObjectsContactsBatchReadReadValidateBeforeCall(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, Boolean archived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchReadInputSimplePublicObjectId' is set
        if (batchReadInputSimplePublicObjectId == null) {
            throw new ApiException("Missing the required parameter 'batchReadInputSimplePublicObjectId' when calling postCrmV3ObjectsContactsBatchReadRead(Async)");
        }

        return postCrmV3ObjectsContactsBatchReadReadCall(batchReadInputSimplePublicObjectId, archived, _callback);

    }

    /**
     * Read a batch of contacts by internal ID, or unique property values
     * 
     * @param batchReadInputSimplePublicObjectId  (required)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @return BatchResponseSimplePublicObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public BatchResponseSimplePublicObject postCrmV3ObjectsContactsBatchReadRead(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, Boolean archived) throws ApiException {
        ApiResponse<BatchResponseSimplePublicObject> localVarResp = postCrmV3ObjectsContactsBatchReadReadWithHttpInfo(batchReadInputSimplePublicObjectId, archived);
        return localVarResp.getData();
    }

    /**
     * Read a batch of contacts by internal ID, or unique property values
     * 
     * @param batchReadInputSimplePublicObjectId  (required)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @return ApiResponse&lt;BatchResponseSimplePublicObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchResponseSimplePublicObject> postCrmV3ObjectsContactsBatchReadReadWithHttpInfo(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, Boolean archived) throws ApiException {
        okhttp3.Call localVarCall = postCrmV3ObjectsContactsBatchReadReadValidateBeforeCall(batchReadInputSimplePublicObjectId, archived, null);
        Type localVarReturnType = new TypeToken<BatchResponseSimplePublicObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read a batch of contacts by internal ID, or unique property values (asynchronously)
     * 
     * @param batchReadInputSimplePublicObjectId  (required)
     * @param archived Whether to return only results that have been archived. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCrmV3ObjectsContactsBatchReadReadAsync(BatchReadInputSimplePublicObjectId batchReadInputSimplePublicObjectId, Boolean archived, final ApiCallback<BatchResponseSimplePublicObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCrmV3ObjectsContactsBatchReadReadValidateBeforeCall(batchReadInputSimplePublicObjectId, archived, _callback);
        Type localVarReturnType = new TypeToken<BatchResponseSimplePublicObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCrmV3ObjectsContactsBatchUpdateUpdate
     * @param batchInputSimplePublicObjectBatchInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCrmV3ObjectsContactsBatchUpdateUpdateCall(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchInputSimplePublicObjectBatchInput;

        // create path and map variables
        String localVarPath = "/crm/v3/objects/contacts/batch/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "private_apps" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCrmV3ObjectsContactsBatchUpdateUpdateValidateBeforeCall(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchInputSimplePublicObjectBatchInput' is set
        if (batchInputSimplePublicObjectBatchInput == null) {
            throw new ApiException("Missing the required parameter 'batchInputSimplePublicObjectBatchInput' when calling postCrmV3ObjectsContactsBatchUpdateUpdate(Async)");
        }

        return postCrmV3ObjectsContactsBatchUpdateUpdateCall(batchInputSimplePublicObjectBatchInput, _callback);

    }

    /**
     * Update a batch of contacts
     * 
     * @param batchInputSimplePublicObjectBatchInput  (required)
     * @return BatchResponseSimplePublicObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public BatchResponseSimplePublicObject postCrmV3ObjectsContactsBatchUpdateUpdate(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput) throws ApiException {
        ApiResponse<BatchResponseSimplePublicObject> localVarResp = postCrmV3ObjectsContactsBatchUpdateUpdateWithHttpInfo(batchInputSimplePublicObjectBatchInput);
        return localVarResp.getData();
    }

    /**
     * Update a batch of contacts
     * 
     * @param batchInputSimplePublicObjectBatchInput  (required)
     * @return ApiResponse&lt;BatchResponseSimplePublicObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchResponseSimplePublicObject> postCrmV3ObjectsContactsBatchUpdateUpdateWithHttpInfo(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput) throws ApiException {
        okhttp3.Call localVarCall = postCrmV3ObjectsContactsBatchUpdateUpdateValidateBeforeCall(batchInputSimplePublicObjectBatchInput, null);
        Type localVarReturnType = new TypeToken<BatchResponseSimplePublicObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a batch of contacts (asynchronously)
     * 
     * @param batchInputSimplePublicObjectBatchInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> multiple statuses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCrmV3ObjectsContactsBatchUpdateUpdateAsync(BatchInputSimplePublicObjectBatchInput batchInputSimplePublicObjectBatchInput, final ApiCallback<BatchResponseSimplePublicObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCrmV3ObjectsContactsBatchUpdateUpdateValidateBeforeCall(batchInputSimplePublicObjectBatchInput, _callback);
        Type localVarReturnType = new TypeToken<BatchResponseSimplePublicObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
